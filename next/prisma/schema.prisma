datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") 
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Menu Item Model
model MenuItem {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  description String
  category    String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// RSVP Model
model EventRSVP {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  name      String
  email     String
  guests    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Update Event model to include RSVP relation
model Event {
  id          Int        @id @default(autoincrement())
  title       String
  description String     @db.Text
  date        DateTime
  time        String
  image       String?
  capacity    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  rsvps       EventRSVP[]
}

// Promotion Model
model Promotion {
  id             Int      @id @default(autoincrement())
  title          String
  description    String   @db.Text
  validUntil     DateTime
  discountAmount String
  code           String   @unique
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Reservation Model
model Reservation {
  id             Int      @id @default(autoincrement())
  name          String
  email         String
  phone         String
  date          DateTime
  time          String
  guests        Int
  specialRequests String? @db.Text
  status        String   @default("pending") // pending, confirmed, cancelled
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Transaction Model
model Transaction {
  id          Int      @id @default(autoincrement())
  orderNumber String   @unique
  items       Json     // Store cart items as JSON
  subtotal    Float
  tax         Float
  total       Float
  status      String   @default("pending") // pending, completed, cancelled
  paymentMethod String
  customerName String?
  customerEmail String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}